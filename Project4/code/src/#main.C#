#include <iostream>
#include <EventReader.h>
#include <ComplexBuilder.h>
#include <TAxis.h>
#include <TCanvas.h>

using namespace std;

void GetReaderEntry( EventReader*, Long64_t );

int main(){

  // directory with .root madgraph output files
  string DataDirectory = "/home/noah/Dropbox/SS16/PHY480/data/";
  // location of file with list of madgraph output files
  string EventFile = "/home/noah/Dropbox/git-repos/ngreenSS16PHY480/Project4/code/src/eventfiles.dat";

  EventReader *TopoEvents= new EventReader( EventFile, DataDirectory );
  ComplexBuilder TopComplex( TopoEvents );
  cout << TopComplex.Nevent() << " events loaded." << endl;

  /*
  //=====================================================================================
  // Make metric space and point cloud plot for a single event
  //=====================================================================================

  int ievent = 10869; // event number
  ostringstream name;
  string sample_cluster = "jet_ca_";
  name << sample_cluster << ievent ;
  TopComplex.MetricSpace(ievent,ca);
  TopComplex.DensityFilter(1.6);
  TopComplex.MetricSpaceCSV(name.str());

  TCanvas *c1 = new TCanvas("c1","c1",600,600);
  c1->cd();
  TGraph *etaphi =  TopComplex.PlotPtEtaPhi();
  etaphi->SetMarkerStyle(7);
  etaphi->Draw("AP");
  etaphi->GetXaxis()->SetTitle("#phi");
  etaphi->GetYaxis()->SetTitle("#eta");
  string pdfname = name.str() + ".pdf";
  c1->SaveAs(pdfname.c_str());
  */

  //=====================================================================================
  // Make metric space and point cloud plot for a single event
  //=====================================================================================

  double progress;
  Double_t pt_cut_low = 230.; // minimum transverse momentum
  Double_t pt_cut_high = 240.; // maximum transverse momentum

  string sample_cluster = "top_pt_230-240/top_ca_"; // beginning of .csv filename

  for( unsigned int i = 0; i < 1000; i++ ){ // iterate over 1st 1000 events
 //for( unsigned int i = 0; i < TopComplex.Nevent(); i++ ){ // iterate over all loaded events
    TopComplex.SelectEvent(i);

    // save metric space to .csv is event within cuts
    if(  TopComplex.event->MaxPt() > pt_cut_low && TopComplex.event->MaxPt() < pt_cut_high ){
      ostringstream name;
      name << sample_cluster << i ; // build filename
      TopComplex.MetricSpace(i,ca); // build metric space
      TopComplex.DensityFilter(4.); // apply density filter
      TopComplex.MetricSpaceCSV(name.str()); // store to .csv
    }
    
    // progress bar
    int barWidth = 70;
    progress = (double)i/1000 ;
    cout << "[";
    int pos = barWidth * progress;
    for (int i = 0; i < barWidth; ++i) {
      if (i < pos) cout << "=";
      else if (i == pos) cout << ">";
      else cout << " ";
    }
    cout << "] " << int(progress * 100.0) << " %\r";
    cout.flush();
    
  }
  
  delete TopoEvents;
  
  return 0;
}

